{"version":3,"sources":["components/Prompt.js","components/StartPage.js","components/InventoryItemCard.js","components/InventoryGrid.js","components/Timer.js","components/CreativeRound.js","components/MULTIComponentWithSound.js","App.js","components/MyComponentWithSound.js","index.js"],"names":["Prompt","players","playerObjects","judgeIndex","parts","criteria","setGameState","judgeName","gameState","useState","crit","setCrit","part","setPart","imageStr","setImageStr","useEffect","grabRandomCriteria","grabRandomPart","getRandomImage","customerPix","Array","imgAr","path","process","Math","floor","random","length","Name","className","name","Button","onClick","src","style","maxHeight","alt","to","console","log","newPrompt","prompt","handleClick","introPix","StartPage","setNameInput","nameInput","handleNameSubmit","playerNames","setJudgeName","handleToggleSound","event","Form","onChange","target","value","handleNameInputChange","Group","controlId","Label","Row","Col","Control","type","placeholder","preventDefault","map","player","index","key","align","InventoryItemCard","component","Attachments","Card","height","width","Img","variant","objectFit","url","position","bottom","Text","textShadow","fontSize","InventoryGrid","handleScoreClick","score","Container","xs","components","Timer","seconds","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","CreativeRound","timerCounter","handleRestartGame","handleRestartClick","compVals","Set","i","rand","has","add","boxMaker","Chords","Drums","FX","getSound","MULTIComponentWithSound","chordsTrack","setChordsTrack","drumsTrack","setDrumsTrack","fxTrack","setFxTrack","playStatus","Sound","status","PLAYING","loop","App","setPlayerObjects","setJudgeIndex","setPlayerNames","setParts","setComponents","setCriteria","soundToggle","setSoundToggle","axios","get","then","res","data","newPart","newComponent","newCriteria","playerClicked","incrementJudge","newPlayerObjects","playerNameArray","includes","newPlayerObject","exact","render","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b5a4d5a0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button } from 'react-bootstrap'\n\nconst Prompt = ({ players, playerObjects, judgeIndex, parts, criteria, judgeName, setGameState, gameState }) => {\n  const[crit, setCrit] = useState('')\n  const[part, setPart] = useState('')\n  const[imageStr, setImageStr] = useState('')\n\n  useEffect(() => {\n    setCrit(grabRandomCriteria())\n    setPart(grabRandomPart())\n    setImageStr(getRandomImage(customerPix, '/images/scenarios/'))\n  }, [])\n\n  var customerPix = new Array(\"RDE-001C.BMP\", \"KFR-010B.BMP\", \"GBR-505C.BMP\", \"GLB-031C.BMP\", \"CTD-012C.BMP\", \"DZI-323C.BMP\", \"ISLANDS.BMP\", \"GBR-504C.BMP\", \"KFR-011B.BMP\", \"FUTURGAL.BMP\", \"KFR-007B.BMP\", \"EDW-147C.BMP\", \"MCG-508C.BMP\", \"RHT-013C.BMP\", \"MCG-411C.BMP\", \"LAL-017C.BMP\", \"GREENSHP.BMP\", \"GBR-515C.BMP\", \"DRM-00~1.BMP\", \"DLN-101C.BMP\", \"BHB-069B.BMP\", \"MCG-518C.BMP\", \"DLA-006C.BMP\", \"BEL-102C.BMP\", \"CWL-004B.BMP\", \"LAL-016C.BMP\", \"GBR-538B.BMP\", \"HANGAR.BMP\", \"MCG-413C.BMP\", \"EDW-066B.BMP\", \"AMC-103C.BMP\", \"JLQ-253C.BMP\", \"LTF-015B.BMP\", \"RHT-016C.BMP\", \"KFR-015C.BMP\", \"CYH-010B.BMP\", \"DLA-008C.BMP\", \"LAL-014C.BMP\", \"CWL-006B.BMP\", \"DLN-105C.BMP\", \"HRD-052C.BMP\", \"HJL-016C.BMP\", \"CHN-003C.BMP\", \"KFR-008B.BMP\", \"AMC-020C.BMP\", \"HJL-017C.BMP\", \"RBP-002C.BMP\", \"GBR-025C.BMP\", \"RMO-011C.BMP\", \"KFR-013B.BMP\");\n  function getRandomImage(imgAr, path) {\n      path = path || '/images/'; // default path here\n      var num = Math.floor( Math.random() * imgAr.length );\n      var img = imgAr[ num ];\n      var imgStr = process.env.PUBLIC_URL + path + img;\n      return imgStr;\n  }\n\n  const grabRandomPart = () => {\n    if (parts){\n      return parts[Math.floor(Math.random() * parts.length)].Name\n    } else {\n      return 'Error'\n    }\n  }\n\n  const handleRemixClick = () => {\n    setCrit(grabRandomCriteria())\n    setPart(grabRandomPart())\n    setImageStr(getRandomImage(customerPix, '/images/scenarios/'))\n  }\n\n  const handleClick = () => {\n    console.log('clicked')\n    const newPrompt = `I need a ${part} that ${crit}`\n    setGameState({...gameState, prompt: newPrompt})\n    console.log(playerObjects)\n  }\n\n  const grabRandomCriteria = () => {\n\n    if (criteria) {\n      return criteria[Math.floor(Math.random() * criteria.length)].Name\n    } else {\n      return 'Error'\n    }\n  }\n\n  return (\n    <>\n      <h4>Client: <span className='text-primary font-weight-bold'>{playerObjects[judgeIndex].name}</span>        <Button className='btn-danger' onClick={() => handleRemixClick()}>Remix Prompt</Button>\n</h4>\n      <img src={imageStr} style={{ maxHeight: '500px'}} alt=\"logo\" />\n      <h1>\n        I need a <span className='text-danger'>{part}</span> that <span className='text-warning'>{crit}</span>.\n      </h1>\n      <div>\n        <Link to={process.env.PUBLIC_URL + '/components'}>\n          <Button onClick={() => handleClick()}>Start Bidding</Button>\n        </Link>\n      </div>\n    </>\n  )\n}\n export default Prompt\n","import React, { useState, useEffect } from 'react';\n\nimport { Button, Form, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\n\nvar introPix = new Array(\"STATION.BMP\",\"TEMPLE.BMP\",\"ASTEROID.BMP\");\nfunction getRandomImage(imgAr, path) {\n    path = path || '/images/'; // default path here\n    var num = Math.floor( Math.random() * imgAr.length );\n    var img = imgAr[ num ];\n    var imgStr = process.env.PUBLIC_URL + path + img;\n    return imgStr;\n}\n\nconst StartPage = ({\n  setNameInput,\n  nameInput,\n  handleNameSubmit,\n  playerNames,\n  playerObjects,\n  setJudgeName,\n  judgeIndex,\n  handleToggleSound\n})=> {\n\n  const handleClickStart = () => {\n    console.log('clicked')\n    setJudgeName(playerObjects[judgeIndex].name)\n    // props.history.push('/prompt')\n  }\n\n  const handleClick = event => {\n    event.preventDefault()\n    handleNameSubmit(event)\n  }\n\n  const handleNameInputChange = event => {\n    setNameInput(event.target.value)\n  }\n\n  const handleAudioClick = event => {\n    handleToggleSound()\n  }\n\n  return (\n    <>\n    <p>Gornath Crafters Guild: <i>Bidding Challenge</i>!</p>\n      <img src={getRandomImage(introPix, '/images/intros/')} className=\"App-logo\" alt=\"logo\" />\n      <Button onClick={(event) => {handleAudioClick(event)}}>Play/Pause Music</Button>\n      <p></p>\n        <code>GGJ 2020</code>\n\n<p>Welcome to Space Station Gornath! What brings you this deep into the Omega Quadrant?\nAnyways, the rough conditions and remoteness of this region make this output an oasis for explorers. Most visitors have a need for repairs and upgrades.\nDue to this need multiple repair shops have emerged in the station, of varying quality…</p>\n\n<p>In this game you will take turns being the <u>repair shop owners</u> and <u>clients</u> with particular needs. </p>\n\n<p>As the <u>repair shop owner</u>, the sale is all that matters - the almighty space buck is king. You will need to work with what you have to engineer a solution and out-sell the rival shops. </p>\n\n<p>As the <u>client</u>, you will decide which solution to purchase based on its ingenuity and how well it solves your problem. In these times, it doesn’t take much to get a ship, and most pilots aren’t experts in engineering.</p>\n\n<p>Get ready to craft some space stuff!</p>\n<p></p>\n<p></p>\n\n    {playerObjects.length <= 4 ? <Form onChange={(event) => handleNameInputChange(event)}>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Add 3-5 Players:</Form.Label>\n        <Row>\n          <Col>\n            <Form.Control value={nameInput} type=\"text\" placeholder=\"player name\"/>\n          </Col>\n          <Col>\n            <Button type='submit' onClick={(event) => {event.preventDefault(); handleClick(event)}}>Add Player</Button>\n          </Col>\n        </Row>\n      </Form.Group>\n    </Form> : null}\n\n    <ul>\n      {playerObjects.map((player, index) => {\n        return (\n          <p key={index}>{player.name}</p>\n        )\n      })}\n    </ul>\n\n    <Link to={process.env.PUBLIC_URL + '/prompt'}>\n      <Button onClick={() => handleClickStart()}>Start Game</Button>\n    </Link>\n\n    <p align=\"left\">\n    <p>Game Instructions:</p>\n    <ol>\n      <li>Gather 3-5 players. Each player will need a few index card size pieces of paper and a pen.</li>\n      <li>In each round of the game one player will be the “client” and the other players will be the “crafters”</li>\n      <li>The client will read the prompt and may make up a background story for why they need this item</li>\n      <li>Once “Bidding” begins, all of the other players will be presented with a list of items available to them,\n      and then have 2 minutes to make up a widget and prepare their pitch (it should be written on their paper). The pitch must have a:</li>\n      <ol>\n      <li>Name</li>\n      <li>Explanation/drawing of how it works, and how it meets the client’s needs</li>\n      </ol>\n      <li>Once the 2 minute countdown ends, the client will listen to each crafter’s pitch. The client then awards the contract for the proposal that they feel is the most convincing.</li>\n      <li>Play ends when players have had enough, and all players have been a judge the same amount of times</li>\n    </ol>\n    </p>\n\n    </>\n  )\n}\n\nexport default StartPage\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nconst InventoryItemCard = ({ component }) => {\n  if (component.Attachments){\n    return (\n      <Card className='text-center' style={{ height: '125px', width: '8rem' }}>\n          <Card.Img variant=\"top\" style={{ maxHeight: '75%', objectFit: 'contain'}}  src={component.Attachments[0].url} />\n          <div className='text-center' style={{position: 'absolute', bottom:'2px'}}>\n            <Card.Text style={{ textShadow: '3px 3px 5px white', fontSize: '15px' }} className='text-dark'>{component.Name}</Card.Text>\n          </div>\n      </Card>\n    )\n        }\n    return (\n      <>\n      </>\n    )\n  }\n\n\n\nexport default InventoryItemCard\n","import React from 'react'\nimport { Col, Row, Container, Button, Form } from 'react-bootstrap'\nimport InventoryItemCard from './InventoryItemCard'\nimport { Link } from 'react-router-dom'\nconst InventoryGrid = ({ player, handleScoreClick }) => {\n  console.log(player)\n  return (\n  <div className='border border-light'>\n    <Form>\n      <Form.Row>\n        <Col>\n          <h5 className='text-nowrap'>{player.name}</h5>\n        </Col>\n        <Col>\n          <h5 className='text-nowrap'> Score: {player.score} </h5>\n        </Col>\n        <Col>\n          <Link to={process.env.PUBLIC_URL + '/prompt'}>\n            <Button className='btn-success text-nowrap' onClick={() => handleScoreClick(player)}>Award Contract</Button>\n          </Link>\n        </Col>\n      </Form.Row>\n    </Form>\n      {/* <Row >\n        <Col className='text-nowrap'>\n          <h5 className='text-nowrap'>{player.name}</h5>\n        </Col>\n        <Col>\n        </Col>\n        <Col className='text-nowrap'>\n          <h5 className='text-nowrap'> Score: {player.score} </h5>\n        </Col>\n        <Col>\n        </Col>\n        <Col >\n          <Link to={process.env.PUBLIC_URL + '/prompt'}>\n            <Button className='btn-success text-nowrap' onClick={() => handleScoreClick(player)}>Award Contract</Button>\n          </Link>\n        </Col>\n      </Row> */}\n      <Container className='border border-light' >\n        <Row xs={4} >\n          <Col xs={2} className='col-4'>\n            <InventoryItemCard component={player.components[0]}/>\n          </Col>\n          <Col xs={2} className='col-4'>\n            <InventoryItemCard component={player.components[1]} />\n          </Col>\n          <Col xs={2} className='col-4'>\n            <InventoryItemCard component={player.components[2]} />\n          </Col>\n        </Row>\n        <Row xs={4} >\n          <Col xs={2} className='col-4'>\n            <InventoryItemCard component={player.components[3]}/>\n          </Col>\n          <Col xs={2} className='col-4'>\n            <InventoryItemCard component={player.components[4]} />\n          </Col>\n          <Col xs={2} className='col-4'>\n            <InventoryItemCard component={player.components[5]} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default InventoryGrid\n","import React, {useState, useEffect } from 'react'\n\nconst Timer = ({ seconds }) => {\n  // initialize timeLeft with the seconds prop\n  const [timeLeft, setTimeLeft] = useState(seconds);\n\n  useEffect(() => {\n    // exit early when we reach 0\n    if (!timeLeft) return;\n\n    // save intervalId to clear the interval when the\n    // component re-renders\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    // clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n    // add timeLeft as a dependency to re-rerun the effect\n    // when we update it\n  }, [timeLeft]);\n\n  return (\n      <h4>Time Left: {timeLeft}</h4>\n  );\n};\n\nexport default Timer\n","import React, { useState } from 'react'\nimport { Container, Button, Row, Col } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport InventoryGrid from './InventoryGrid'\nimport Timer from './Timer'\n\nconst CreativeRound = ({ timerCounter, gameState, handleRestartGame, handleScoreClick, handleRestartClick, players, playerNames, playerObjects, components, judgeIndex }) => {\n  const [componentArray, setComponentArray] = useState([])\n\n\n  console.log(playerObjects)\n  console.log(timerCounter)\n\n  const roundPlayers = playerObjects.map(player => {\n    var compVals = new Set()\n    for (let i = 0; i < 6; i++) {\n      var rand\n      do{\n        rand = Math.floor(Math.random() * components.length);\n      }while(compVals.has(rand))\n      compVals.add(rand)\n\n      player.components[i] = components[rand]\n    }\n  })\n\n  const boxMaker = (index) => {\n    if (playerObjects[index]){\n      if (judgeIndex !== index && !(judgeIndex < index)){\n        //do player index\n        return (<InventoryGrid handleScoreClick={handleScoreClick} player={playerObjects[index]}/>)\n      }else{\n        //do player index+1\n        if (playerObjects[index + 1]){\n          return (<InventoryGrid handleScoreClick={handleScoreClick} player={playerObjects[index+1]}/>)\n        } else {\n          return\n        }\n      }\n    } else {\n      return\n    }\n\n  }\n\n  return (\n    <>\n    <Row className='mb-3 border border-light'>\n      <Col className='text-nowrap'>\n        <h5>{gameState.prompt}</h5>\n      </Col>\n      <Col className='text-nowrap'>\n        <h5>Client: {playerObjects[judgeIndex].name}</h5>\n      </Col>\n      <Col>\n        <Timer seconds={120}/>\n      </Col>\n      <Col className='text-nowrap'>\n        <Link to={process.env.PUBLIC_URL + '/'}>\n          <Button className='text-nowrap' onClick={() => handleRestartGame()}>New Game</Button>\n        </Link>\n      </Col>\n    </Row>\n    <Container>\n      <Row>\n        <Col>\n          {boxMaker(0)}\n        </Col>\n        <Col>\n          {boxMaker(1)}\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {boxMaker(2)}\n        </Col>\n        <Col>\n          {boxMaker(3)}\n        </Col>\n      </Row>\n    </Container>\n\n      {/* <Jumbotron>\n        {components.map((component, index) => {\n          if (index < 7) {\n            return (\n            <InventoryItemCard component={component} />\n            )\n          }\n        })}\n\n      </Jumbotron> */}\n      {/* {components.map(component => {\n        return <InventoryItemCard component={component} />      })} */}\n    </>\n\n  )\n}\n\nexport default CreativeRound\n","import React, { useEffect, useState } from 'react'\nimport Sound from 'react-sound';\n\n\nconst Chords = new Array(\"CHORDS1.mp3\", \"CHORDS2.mp3\", \"CHORDS3.mp3\");\nconst Drums = new Array(\"DRUMS1.mp3\",\"DRUMS2.mp3\",\"Drums3.mp3\");\nconst FX = new Array(\"FX1.mp3\",\"FX2.mp3\",\"FX3.mp3\")\n\n\n\nfunction getSound(name, path) {\n    path = path || '/music/stems/'; // default path here\n    var soundStr = process.env.PUBLIC_URL + path + name;\n    return soundStr;\n}\n\n\n\nfunction MULTIComponentWithSound(){\n\n  const[chordsTrack, setChordsTrack] = useState(getSound(Chords[Math.floor( Math.random() * Chords.length )]))\n  const[drumsTrack, setDrumsTrack] = useState(getSound(Drums[Math.floor( Math.random() * Drums.length )]))\n  const[fxTrack, setFxTrack] = useState(getSound(FX[Math.floor( Math.random() * FX.length )]))\n\n  useEffect(() => {\n      setChordsTrack(getSound(Chords[Math.floor( Math.random() * Chords.length )]))\n      setDrumsTrack(getSound(Drums[Math.floor( Math.random() * Drums.length )]))\n      setFxTrack(getSound(FX[Math.floor( Math.random() * FX.length )]))\n    }, [])\n\n\n    return (<>\n    <Sound\n      url={chordsTrack}\n      playStatus={Sound.status.PLAYING}\n      loop={true}\n    />\n    <Sound\n      url={drumsTrack}\n      playStatus={Sound.status.PLAYING}\n      loop={true}\n    />\n    <Sound\n      url={fxTrack}\n      playStatus={Sound.status.PLAYING}\n      loop={true}\n    /></>\n  );\n\n}\nexport default MULTIComponentWithSound\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Navbar, Form, Button, FormControl } from 'react-bootstrap'\nimport { BrowserRouter as Router,\n        Switch,\n        Route,\n      Link } from 'react-router-dom'\nimport Prompt from './components/Prompt'\nimport StartPage from './components/StartPage'\nimport CreativeRound from './components/CreativeRound'\nimport axios from 'axios'\nimport BackgroundMusic from './components/MULTIComponentWithSound'\nimport Timer from './components/Timer'\n\nfunction App() {\n  const [players, setPlayers] = useState(0)\n  const [playerObjects, setPlayerObjects] = useState([])\n  const [judgeIndex, setJudgeIndex] = useState(0)\n  const [judgeName, setJudgeName] = useState('No judge yet')\n  const [playerNames, setPlayerNames] = useState([])\n  const [parts, setParts] = useState([])\n  const [components, setComponents] = useState([])\n  const [criteria, setCriteria] = useState([])\n  const [nameInput, setNameInput] = useState('')\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [soundToggle, setSoundToggle] = useState(false);\n  const [gameState, setGameState] = useState([])\n\n  useEffect(() => {\n    const newGameState = {\n      prompt: ''\n    }\n    setGameState(newGameState)\n    axios.get('https://guarded-ridge-39330.herokuapp.com/api/airtable/parts')\n        .then(res => {\n          res.data.map(part => {\n            const newPart = part\n            setParts(parts => [...parts, newPart])\n          })\n        })\n\n    axios.get('https://guarded-ridge-39330.herokuapp.com/api/airtable/components')\n        .then(res => {\n          res.data.map(component => {\n            const newComponent = component\n            setComponents(components => [...components, newComponent])\n          })\n        })\n\n    axios.get('https://guarded-ridge-39330.herokuapp.com/api/airtable/criteria')\n          .then(res => {\n            res.data.map(criteria => {\n              if (criteria.Name) {\n                const newCriteria = criteria\n                setCriteria(criteria => [...criteria, newCriteria])\n              }\n            })\n          })\n\n  }, [])\n\n  const handleScoreClick = playerClicked => {\n    incrementJudge()\n    if (playerObjects[judgeIndex]){\n      setJudgeName(playerObjects[judgeIndex].name)\n    }\n    console.log(playerClicked)\n    let newPlayerObjects = playerObjects\n    newPlayerObjects.map(player => {\n      if (player === playerClicked) {\n        player.score++\n        }\n      })\n    setPlayerObjects(newPlayerObjects)\n  }\n\n  const incrementJudge = () => {\n    if (judgeIndex >= playerObjects.length-1){\n      setJudgeIndex(0)\n    } else {\n      setJudgeIndex(judgeIndex + 1)\n    }\n  }\n\n  // const handleRestartClick = () => {\n  //   incrementJudge()\n  //   if (playerObjects[judgeIndex]){\n  //     setJudgeName(playerObjects[judgeIndex].name)\n  //   }\n  // }\n\n  const handleNameSubmit = event => {\n    event.preventDefault()\n    let playerNameArray = playerObjects.map(player => player.name)\n    if (nameInput !== '' && (!playerNameArray.includes(nameInput))){\n      const newPlayerObject = {\n        name: nameInput,\n        components: [],\n        score: 0\n      }\n      setPlayerObjects([...playerObjects, newPlayerObject])\n      setPlayerNames(playerNames => [...playerNames, nameInput])\n      setNameInput('')\n      event.target.value = ''\n    }\n  }\n\n  const handleRestartGame = () => {\n    setPlayerObjects([])\n  }\n\n  const handleToggleSound = () => {\n    setSoundToggle(!soundToggle)\n  }\n\n  // const judgeName = () => {\n  //   if (playerObjects[judgeIndex]) {\n  //     return playerObjects[judgeIndex].Name\n  //   } else {\n  //     return 'No judge yet'\n  //   }\n  // }\n\n  // const handlePlayerChange = event => {\n  //   setPlayers(event.target.value)\n  // }\n  // six items\n  return (\n    <div className=\"App\">\n        {/* <Navbar className='sticky-top' bg=\"light\">\n          <Navbar.Brand href=\"#home\">Judge: {judgeName} </Navbar.Brand>\n        </Navbar> */}\n        {soundToggle ? <BackgroundMusic/> : null}\n      <header className=\"App-header\">\n        <Router>\n          <Switch>\n            <Route exact path={process.env.PUBLIC_URL + \"/\"} render={() => {\n              return (\n                <StartPage\n                  players={players}\n                  // handlePlayerChange={handlePlayerChange}\n                  nameInput={nameInput}\n                  setNameInput={setNameInput}\n                  handleNameSubmit={handleNameSubmit}\n                  playerNames={playerNames}\n                  playerObjects={playerObjects}\n                  setJudgeName={setJudgeName}\n                  judgeIndex={judgeIndex}\n                  handleToggleSound={handleToggleSound}\n                  gameState={gameState}\n                  />\n              )}\n            }/>\n\n            <Route path={process.env.PUBLIC_URL + \"/prompt\"} render={() => {\n              return (\n                <Prompt\n                  players={players}\n                  parts={parts}\n                  criteria={criteria}\n                  playerNames={playerNames}\n                  playerObjects={playerObjects}\n                  setTimeLeft={setTimeLeft}\n                  judgeName={judgeName}\n                  judgeIndex={judgeIndex}\n                  gameState={gameState}\n                  setGameState={setGameState}\n                  />\n\n              )}\n            }/>\n            <Route path={process.env.PUBLIC_URL + \"/components\"} render={() => {\n              return (\n                <CreativeRound\n                  players={players}\n                  playerNames={playerNames}\n                  components={components}\n                  playerObjects={playerObjects}\n                  judgeIndex={judgeIndex}\n                  judgeName={judgeName}\n                  judgeIndex={judgeIndex}\n                  handleRestartGame={handleRestartGame}\n                  gameState={gameState}\n                  handleScoreClick={handleScoreClick}\n                  />\n              )\n              }}/>\n          </Switch>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport Sound from 'react-sound';\n \n\nfunction getSound(name, path) {\n    path = path || '/music/'; // default path here\n    var soundStr = process.env.PUBLIC_URL + path + name;\n    return soundStr;\n}\n\n\nclass MyComponentWithSound extends React.Component {\n\n\n\n  render() {\n    return (\n    <Sound\n      url={getSound('SpaceJunk_demo.mp3')}\n      playStatus={Sound.status.PLAYING}\n      onLoading={this.handleSongLoading}\n      onPlaying={this.handleSongPlaying}\n      onFinishedPlaying={this.handleSongFinishedPlaying}\n      loop={true}\n    />\n  );\n  }\n}\nexport default MyComponentWithSound","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport BackgroundMusic from './components/MyComponentWithSound'\n\n\nReactDOM.render(\n<BrowserRouter >\n  <App />\n</BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}